diff --git a/Dockerfile b/Dockerfile
index 93016c9..1a503a7 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -23,6 +23,7 @@
 # the case. Therefore, you don't have to disable it anymore.
 #
 
+# Cut for distribution specific
 FROM ubuntu:14.04
 MAINTAINER Tianon Gravi <admwiggin@gmail.com> (@tianon)
 
@@ -68,8 +69,17 @@ RUN apt-get update && apt-get install -y \
 	libzfs-dev \
 	tar \
 	--no-install-recommends \
-	&& ln -snf /usr/bin/clang-3.8 /usr/local/bin/clang \
-	&& ln -snf /usr/bin/clang++-3.8 /usr/local/bin/clang++
+# End dependencies cut
+	automake \
+	git \
+	jq \
+	iptables \
+	libtool \
+	mercurial \
+	parallel \
+	python-devel \
+	python-mock \
+	python-pip
 
 # Get lvm2 source for compiling statically
 RUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2
@@ -91,7 +101,6 @@ ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 # Compile Go for cross compilation
 ENV DOCKER_CROSSPLATFORMS \
 	linux/386 linux/arm \
-	darwin/amd64 darwin/386 \
 	freebsd/amd64 freebsd/386 freebsd/arm \
 	windows/amd64 windows/386
 
@@ -116,15 +125,6 @@ RUN git clone https://github.com/golang/lint.git /go/src/github.com/golang/lint
 	&& (cd /go/src/github.com/golang/lint && git checkout -q $GO_LINT_COMMIT) \
 	&& go install -v github.com/golang/lint/golint
 
-# Configure the container for OSX cross compilation
-ENV OSX_SDK MacOSX10.11.sdk
-RUN set -x \
-	&& export OSXCROSS_PATH="/osxcross" \
-	&& git clone --depth 1 https://github.com/tpoechtrager/osxcross.git $OSXCROSS_PATH \
-	&& curl -sSL https://s3.dockerproject.org/darwin/${OSX_SDK}.tar.xz -o "${OSXCROSS_PATH}/tarballs/${OSX_SDK}.tar.xz" \
-	&& UNATTENDED=yes OSX_VERSION_MIN=10.6 ${OSXCROSS_PATH}/build.sh
-ENV PATH /osxcross/target/bin:$PATH
-
 # install seccomp
 # this can be changed to the ubuntu package libseccomp-dev if dockerinit is removed,
 # we need libseccomp.a (which the package does not provide) for dockerinit
@@ -185,7 +185,9 @@ RUN useradd --create-home --gid docker unprivilegeduser
 
 VOLUME /var/lib/docker
 WORKDIR /go/src/github.com/docker/docker
+#  Cut for buildtags distribution specific
 ENV DOCKER_BUILDTAGS apparmor seccomp selinux
+# End buildtags cut
 
 # Let us use a .bashrc file
 RUN ln -sfv $PWD/.bashrc ~/.bashrc
diff --git a/Makefile b/Makefile
index 58f4dff..942e9a2 100644
--- a/Makefile
+++ b/Makefile
@@ -58,6 +58,7 @@ ifeq ($(INTERACTIVE), 1)
 endif
 
 DOCKER_RUN_DOCKER := $(DOCKER_FLAGS) "$(DOCKER_IMAGE)"
+DOCKER_FILE := $(shell go run ./distros/gen_dockerfile.go)
 
 default: binary
 
diff --git a/distros/Centos.json b/distros/Centos.json
new file mode 100644
index 0000000..8ff787c
--- /dev/null
+++ b/distros/Centos.json
@@ -0,0 +1,37 @@
+{
+    "distribution": "FROM centos",
+    "dependencies":[
+      "  RUN yum -y update && yum install -y \\",
+      "  audit-libs-devel \\",
+      "  binutils \\",
+      "  btrfs-progs-devel \\",
+      "  btrfs-progs \\",
+      "  bzip2 \\",
+      "  clang \\",
+      "  gcc \\",
+      "  gcc-c++ \\",
+      "  glibc-static \\",
+      "  glibc-devel \\",
+      "  glibc-headers \\",
+      "  golang-googlecode-sqlite-devel \\",
+      "  kernel-devel \\",
+      "  libcap-devel \\",
+      "  libvirt-client \\",
+      "  libguestfs-tools \\",
+      "  make \\",
+      "  mingw64-gcc \\",
+      "  php-devel \\",
+      "  python-websocket-client \\",
+      "  python-requests \\",
+      "  redhat-rpm-config \\",
+      "  rpm-devel \\",
+      "  ruby \\",
+      "  ruby-devel \\",
+      "  tar \\" ],
+    "buildtags": "ENV DOCKER_BUILDTAGS seccomp selinux",
+    "markers": [
+      "Cut for distribution specific",
+      "End dependencies cut",
+      "Cut for buildtags distribution",
+      "End buildtags cut" ]
+}
diff --git a/distros/Fedora.json b/distros/Fedora.json
new file mode 100644
index 0000000..757d371
--- /dev/null
+++ b/distros/Fedora.json
@@ -0,0 +1,38 @@
+{
+    "distribution": "FROM fedora",
+    "dependencies":[
+      "  RUN dnf -y update && dnf install -y \\",
+      "  audit-libs-devel \\",
+      "  binutils \\",
+      "  btrfs-progs-devel \\",
+      "  btrfs-progs \\",
+      "  bzip2 \\",
+      "  clang \\",
+      "  gcc \\",
+      "  gcc-c++ \\",
+      "  glibc-static \\",
+      "  glibc-devel \\",
+      "  glibc-headers \\",
+      "  golang-googlecode-sqlite-devel \\",
+      "  kernel-devel \\",
+      "  libcap-devel \\",
+      "  libvirt-client \\",
+      "  libguestfs-tools \\",
+      "  make \\",
+      "  mingw64-gcc \\",
+      "  net-tools \\",
+      "  php-devel \\",
+      "  python-websocket-client \\",
+      "  python-requests \\",
+      "  redhat-rpm-config \\",
+      "  rpm-devel \\",
+      "  ruby \\",
+      "  ruby-devel \\",
+      "  tar \\" ],
+    "buildtags": "ENV DOCKER_BUILDTAGS seccomp selinux",
+    "markers": [
+      "Cut for distribution specific",
+      "End dependencies cut",
+      "Cut for buildtags distribution",
+      "End buildtags cut" ]
+}
diff --git a/distros/RHEL.json b/distros/RHEL.json
new file mode 100644
index 0000000..332f7ee
--- /dev/null
+++ b/distros/RHEL.json
@@ -0,0 +1,37 @@
+{
+    "distribution": "FROM rhel",
+    "dependencies":[
+      "  RUN yum -y update && yum install -y \\",
+      "  audit-libs-devel \\",
+      "  binutils \\",
+      "  btrfs-progs-devel \\",
+      "  btrfs-progs \\",
+      "  bzip2 \\",
+      "  clang \\",
+      "  gcc \\",
+      "  gcc-c++ \\",
+      "  glibc-static \\",
+      "  glibc-devel \\",
+      "  glibc-headers \\",
+      "  golang-googlecode-sqlite-devel \\",
+      "  kernel-devel \\",
+      "  libcap-devel \\",
+      "  libvirt-client \\",
+      "  libguestfs-tools \\",
+      "  make \\",
+      "  mingw64-gcc \\",
+      "  php-devel \\",
+      "  python-websocket-client \\",
+      "  python-requests \\",
+      "  redhat-rpm-config \\",
+      "  rpm-devel \\",
+      "  ruby \\",
+      "  ruby-devel \\",
+      "  tar \\" ],
+    "buildtags": "ENV DOCKER_BUILDTAGS seccomp selinux",
+    "markers": [
+      "Cut for distribution specific",
+      "End dependencies cut",
+      "Cut for buildtags distribution",
+      "End buildtags cut" ]
+}
diff --git a/distros/gen_dockerfile.go b/distros/gen_dockerfile.go
new file mode 100644
index 0000000..9b193d3
--- /dev/null
+++ b/distros/gen_dockerfile.go
@@ -0,0 +1,123 @@
+package main
+
+import (
+	"bufio"
+	"encoding/json"
+	"fmt"
+	"io/ioutil"
+	"log"
+	"os"
+	"strings"
+)
+
+// DfileConfig holds info for distribution-specific Dockerfile
+type DfileConfig struct {
+	Distribution string   `json:"distribution"`
+	Dependencies []string `json:"dependencies"`
+	Buildtags    string   `json:"buildtags"`
+	Markers      []string `json:"markers"`
+}
+
+func check(err error) {
+	if err != nil {
+		panic(err)
+	}
+}
+func genOS() (string, error) {
+	file, err := ioutil.ReadFile("/etc/redhat-release")
+	if err != nil {
+		return "Dockerfile", nil
+	}
+	line := strings.Split(string(file), " ")
+	osStr := line[0]
+	switch osStr {
+	case "Fedora":
+		return "Fedora", nil
+	case "CentOS":
+		return "Centos", nil
+	case "Red":
+		return "RHEL", nil
+	default:
+		return "", nil
+	}
+}
+
+func genDockerfileName(osName string) (string, error) {
+	return "distros/Dockerfile" + osName, nil
+}
+
+func patchLines(patched string, original string, osName string) error {
+	patchedFile, err := os.Create(patched)
+	check(err)
+	w := bufio.NewWriter(patchedFile)
+	defer w.Flush()
+	dfConfig := new(DfileConfig)
+	patchJSON := fmt.Sprintf("distros/%s.json", osName)
+	patchJSONFile, err := os.Open(patchJSON)
+	check(err)
+	defer patchJSONFile.Close()
+	jsonParser := json.NewDecoder(patchJSONFile)
+	check(err)
+	err = jsonParser.Decode(&dfConfig)
+	check(err)
+	origDf, err := os.Open(original)
+	check(err)
+	defer origDf.Close()
+	scanner := bufio.NewScanner(origDf)
+	scanner.Split(bufio.ScanLines)
+	i := 0 // will increment to avoid multiple writes of same lines
+	for scanner.Scan() {
+		switch i {
+		case 0:
+			if !strings.Contains(scanner.Text(), dfConfig.Markers[0]) {
+				fmt.Fprintln(w, scanner.Text())
+			} else {
+				fmt.Fprintln(w, scanner.Text())
+				fmt.Fprintln(w, dfConfig.Distribution)
+				for _, dep := range dfConfig.Dependencies {
+					fmt.Fprintln(w, dep)
+				}
+				i++
+			}
+		case 1:
+			if strings.Contains(scanner.Text(), dfConfig.Markers[1]) {
+				fmt.Fprintln(w, scanner.Text())
+				i++
+			}
+		case 2:
+			if !strings.Contains(scanner.Text(), dfConfig.Markers[2]) {
+				fmt.Fprintln(w, scanner.Text())
+			} else {
+				fmt.Fprintln(w, scanner.Text())
+				fmt.Fprintln(w, dfConfig.Buildtags)
+				i++
+			}
+		case 3:
+			if strings.Contains(scanner.Text(), dfConfig.Markers[3]) {
+				fmt.Fprintln(w, scanner.Text())
+				i++
+			}
+		default:
+			fmt.Fprintln(w, scanner.Text())
+		}
+	}
+	return nil
+}
+
+func main() {
+	osName, err := genOS()
+	if err != nil {
+		log.Fatal(err)
+	}
+	patchedDockerfile, err := genDockerfileName(osName)
+	if err != nil {
+		log.Fatal(err)
+	}
+	if patchedDockerfile != "Dockerfile" {
+		err = patchLines(patchedDockerfile, "Dockerfile", osName)
+		if err != nil {
+			log.Fatal(err)
+		}
+	}
+	fmt.Println(patchedDockerfile)
+}
